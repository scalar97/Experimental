The following repository contains personal implementation of the 'Python-Programming-Funcdation' course I took on Udacity.
This ReadMe file contains personal notes I took as I while I was taking the course. 

** Modules

- the similarity between webbrowser and turtle is that they are both modules

** Functions vs Methods

- the difference between _webbrowser.open()_ and _turtle.Turle()_ is 
  that *open()* is a function withing he webbwoser module. 
  A function is a block of code that is *NOT bound* to any specific class or object.
  *Turtle()* on the other hand is a class within the turtle module.
  This class will have methods that will be bound to it and accessed by explicitly
  creating an instance of this class.
  
  _When the object is instantiated, the CPU allocates memory to the newly created object._
  
- Also When webbrowser.open is called, the body of the open() function is executed,
  meanwhile when *turtle.Turtle()* is called, it is its *__init__()* method body that is executed

** Nested Packages and modules

To access nested modules, the dot is used as opposed to the slash
e.g. to access ../twilio/rest/__init__.py
#+begin_src python :session 
import twilio.rest
#+end_src

this automatically gives acces to all the contents inside __init__.py
e.g 
#+begin_src python :session 
baz = TwilioRestClient(spam, eggs)
#+end_src

The following is also valid.

#+begin_src python :session
from twilio import rest
baz = rest.TwilioRestClient(foo,spam)
#+end_src

** Class definition and instatiation
- It is good practice to define your classes in one file
  Then import them in another for use.

- When the self keyword is taken out from a variable inside a method, 
  that variable gets changed from an instance attribute or instance varuable to 
  a local variable inside that method. 
  The same thing apply for functions that do not take self as their first argument.
  these are usually helper functions to instance methods. or object methods.

** Class variables
- class variables are variables that are shared among instances.
  example in the media.Movie() class, if there is a new variable called valid ratings
  it would not make sens for toy_story to have its own attribute called 
#+begin_src python :session
toy_story.VALID_RATINGS =tuple()
#and for the avatar movie to have an attribute called
avatar.VALID_RATINGS=tuple()
#+end_src
  the valid_ratings set() is a good candidate for a class variable as it is the same ressource among
  all instances.

	- To access a class variable, the class name has to be used.
#+begin_src python :session
class Movie(object):
	VALID_RATINGS = ("G", "PG", "PG-13", "R")
	def __init__(self,*args, **kwargs):
		pass
# to access the valid ratings
print(Movie.VALID_RATINGS)

#+end_src
  Notice that the above code is not bound to any object, but the class itself, because
it is a class method.
  And since *VALID_RATINGS is now a constant* it should be all capitals by convention. 
  I also changed the datastrucutre from set to tuple to make the variable /immuatable/.

 
  
