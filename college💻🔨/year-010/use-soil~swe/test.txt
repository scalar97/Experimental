USE version 5.0.0, Copyright (C) 1999-2017 University of Bremen
java.lang.UnsatisfiedLinkError: no natGNUReadline in java.library.path
Apparently, the GNU readline library is not available on your system.
The program will continue using a simple readline implementation.
You can turn off this warning message by using the switch -nr
use> 
use> -- open the doil file
use> 
use> open contract.soil
contract.soil> -- Script generated by USE 5.0.0
contract.soil> 
contract.soil> !new Company('ibm')
contract.soil> !new Company('samsung')
contract.soil> !new Company('microsoft')
contract.soil> !new Person('tim')
contract.soil> !new Person('joe')
contract.soil> !new Contract('porter')
contract.soil> !new Contract('sdev')
contract.soil> !new Contract('comedian')
contract.soil> !new Contract('batman')
contract.soil> !new Contract('guitarist')
contract.soil> !porter.title := 'Porter'
contract.soil> !porter.salary := 19000
contract.soil> !batman.salary := 100000
contract.soil> !comedian.salary := 99999
contract.soil> !guitarist.salary := 20000
contract.soil> !sdev.title := 'Software Developer'
contract.soil> !sdev.salary := 50000
contract.soil> !tim.name := 'Timmy'
contract.soil> !tim.age := 25
contract.soil> !tim.income := 0
contract.soil> !joe.name := 'John'
contract.soil> !joe.age := 23
contract.soil> !joe.income :=0
contract.soil> 
use> use> -- hire with wage > 20k, defined person and untaken contract
use> 
use> !openter ibm hire(tim,sdev)
precondition `personIsDefined' is true
precondition `contractNotYetTaken' is true
precondition `personIsNotYetHired' is true
precondition `hireMinimumSalary' is true
use> 
use> -- as shown above the tim object exist, the contract sdev is not yet been signed by any other person (preserves multiplicity)
use> -- tim is not yet hired at ibm, and the minimum salary being proposed to tim is above 20k
use> 
use> -- run soil code to hire tim
use> !ibm.hireSoil(tim,sdev)
use> 
use> -- let's see the link between tim and ibm before exit
use> ? ibm.contracts -> intersection(tim.jobs)
-> Set{sdev} : Set(Contract)
use>
use> -- as shown above, they are now linked through the sdev contract
use> 
use> -- exit the expression
use> 
use> !opexit
postcondition `personNowInHired' is true
postcondition `PersonIncomeUpdated' is true
use> 
use> -- tim is now hired because he is now linked to ibm through the sdev contract
use> -- tim's income was also updated by the amount in the sdev contract.
use> -- proof
use> ? tim.income = sdev.salary
-> true : Boolean
use> 
use> 
use> 
use> -- hiring a person that is not defined
use> !openter microsoft  hire(ann, comedian)
<input>:1:0: Variable `ann' in expression `ann' is undefined.
use> 
use> -- as seen above that object ann does not exist
use> 
use> -- Hiring a person for more than one job in the same company
use> 
use> !openter ibm hire(tim, guitarist)
precondition `personIsDefined' is true
precondition `contractNotYetTaken' is true
precondition `personIsNotYetHired' is false
precondition `hireMinimumSalary' is true
Error: precondition false in operation call `Company::hire(self:ibm, person:tim, contract:guitarist)'.
use>
use> 
use> -- the code above fails because the multiplicity of a contract is for 1 person and one person only. 
use> -- another contract object needs to be created for joe, not the exam same one in memory signed by tim.
use> -- in real life this would be like having a binding with someone else's signature on it.
use> 
use> 
use> -- try hiring someone with minimum wage
use> 
use> !openter samsung hire(joe,porter)
precondition `personIsDefined' is true
precondition `contractNotYetTaken' is true
precondition `personIsNotYetHired' is true
precondition `hireMinimumSalary' is false
Error: precondition false in operation call `Company::hire(self:samsung, person:joe, contract:porter)'.
use> 
use> -- as shown, the code above fails because the wage associated with the porter is below 20k
use> ? porter.salary
-> 19000 : Integer
use> 
use> 
use> 
use> 
use> ------------------END HIRE CONSTRAINTS------------------------
use> 
use> -- hire person objects for later checks
use> !ibm.hireSoil(joe, batman)
use> !microsoft.hireSoil(joe, guitarist)
use> !samsung.hireSoil(joe, comedian)
use>
use>
use>
use> -- update tim and joe's ages for salary raise check
use> !tim.age := 12
use> !joe.age := 21
use> 
use> -- raise joe's salary
use> ?joe.jobs
-> Set{batman,comedian,guitarist} : Set(Contract)
use> ?joe.income
-> 219999 : Integer
use>    
use> -- guitarist contract's salary raise
use> 
use> ?guitarist.salary
-> 20000 : Integer
use> 
use> -- raise this salary
use>
use> !openter guitarist raiseSalary(0.2) -- raising salary by 20%
precondition `RaiseSalaryAge21' is true
use>
use> -- joe associated with this guitarist contract is over 21, that's why the precondition succeeds
use>
use> -- run the raise soil
use> !guitarist.raiseSalarySoil(0.2)
use> 
use> -- exit with the next salary the scipt. joe's income should be increased and the guitarist salary should also be increased
use>
use> !opexit 24000.0
postcondition `personIncomeRaised' is true
postcondition `salaryRaisedUpdate' is true
use>
use> -- as shown abve, both joe's income and the salary income were updated
use> -- proof
use> ?guitarist.salary
-> 24000.0 : Real
use> ?joe.income
-> 223999.0 : Real
use>
use>
use>
use>
use> -- tim is 12 years old, let's update his contract's salary and see if he gets any raise
use> ?tim.jobs
-> Set{sdev} : Set(Contract)
use> ?tim.income
-> 50000 : Integer
use> ?sdev.salary
-> 50000 : Integer
use> 
use> -- now let's raise this contract's salary
use> 
use> !openter sdev raiseSalary(0.15)
precondition `RaiseSalaryAge21' is false
Error: precondition false in operation call `Contract::raiseSalary(self:sdev, rate:0.15)'.
use> 
use> -- this precondition fails because tim is under 21 and theregore his contract cannot have a salary raise applied to 
use> -- it is expected that tim's income stayed the same but the sdev contract got updated
use>
use>
use> ?tim.income
-> 50000 : Integer
use> ?sdev.salary
-> 50000 : Integer
use>
use> -- just as expected! 
use>
use>
use> -------FIRE TEST----------
use> ?joe.jobs
-> Set{batman,comedian,guitarist} : Set(Contract)
use> -- let's fire joe from his comedian job because he ain't that funny
use> 
use> ?comedian.salary
-> 99999 : Integer
use> 
use> !openter samsung fire(joe)
precondition `definedPerson' is true
precondition `employeeWasHired' is true
precondition `checkSalaryRange' is true
use> 
use> -- this works because :   
use> -- 1: joe is defined as his relationship he has with samsung through his comedian job
use> -- 2: Joe was hired with samsung and they have comedian as the common element in the set
use> ? joe.jobs -> intersection(samsung.contracts)
-> Set{comedian} : Set(Contract)
use> -- furthermore, joe is not allowed any other jib than that with samsung.
use> 
use> -- 3: joe's salay is bellow 100k so he is safe to be fired.
use> 
use> --runing soil code to fire joe
use> !samsung.fireSoil(joe)        
use> 
use> -- it will be expected that the definition joe had with samsung is now gone after this and their set is empty
use> !opexit   
postcondition `employeeNowFired' is true
postcondition `salaryDroped' is true
use> 
use> -- joe's salary had the salary he has from being a comedian removed.
use> -- joe's relation with samsung through comedian job is also gone
use> 
use> ? joe.jobs -> intersection(samsung.contracts)
-> Set{} : Set(OclVoid)
use> 
use> ?joe.income
-> 124000.0 : Real
use> 
use> -- recal joe's income was previously 223999.0. and 
use> -- 223999.0 - 99999
12400        
use> -- which is joe's new salary
use> ? 223999.0 - 99999
-> 124000.0 : Real
use> 
use> 
use> 
use> -- Try firing someone who was not hired
use> -- now joe is gone from samsung let's try to fire him again
use> 
use> !openter samsung fire(joe)
precondition `definedPerson' is true
precondition `employeeWasHired' is false
precondition `checkSalaryRange' is false
Error: precondition false in operation call `Company::fire(self:samsung, person:joe)'.
use> 
use> 
use> 
use> --1: joe is a defined person object. he is not deleted yet
use> --2: joe was no longer hired at this point in time where he is trying to be fired thus false.
use> --3: joe's salary range is irrevalant at this point because he was no longer hired.he has no connection with samsung anymore.
use> 
use> 
use> 
use> 
use> -- firing someone who earns more than 100k in one contract
use> -- this should not be allowed
use> 
use> 
use> ?joe.jobs -> select(j| j.salary >= 100000) 
-> Set{batman} : Set(Contract)
use> -- let's remove joe from his 100k batman job   
use> 
use> ?batman.company
-> ibm : Company
use> -- joe is batman at ibm
use> 
use> -- now firing initiated, attemt #1
use> 
use> !openter ibm fire(joe)
precondition `definedPerson' is true
precondition `employeeWasHired' is true
precondition `checkSalaryRange' is false
Error: precondition false in operation call `Company::fire(self:ibm, person:joe)'.
use> 
use> -- oops joe is a defined person object, he was indeed hired, but he cannot be fired from his batman position because
use> -- he earns more than 100k on it.        
use> -- joe is 'BATMAN'
use>  
use> !opexit
Error: No current operation
use>
use>
use> 
use> -- But let's fire tim from one of his jobs
use> 
use> ?tim.jobs
-> Set{sdev} : Set(Contract)
use> 
use> -- tim will be unemployed very soon
use> ?sdev.salary
-> 57499.99999999999 : Real
use> 
use> ?sdev.company
-> ibm : Company
use> 
use> !openter ibm fire(tim)
precondition `definedPerson' is true
precondition `employeeWasHired' is true
precondition `checkSalaryRange' is true
use> 
use> -- tim was hired as sdev at ibm, his salary range is < 100k, and tim was a defined object
use> 
use> -- run soil code to fire tim
use> 
use> !ibm.fireSoil(tim)
use> !opexit
postcondition `employeeNowFired' is true 
postcondition `salaryDroped' is true
use>
use> --tim is now Fired because he has no binding with ibm anymore
use> --tim salary dropped from what he received from ibm, this was his nly job, thus 0 moneu left.
use>
use> -- tim must be broke
use> 
use> ?tim.income
-> 0 : Integer
use> --ouch
